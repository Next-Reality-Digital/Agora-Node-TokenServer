name: Deploy k8s

on:
  workflow_dispatch:
    inputs:
      key_vault_id:
        description: "Azure Key Vault ID"
        required: true
        type: string
      secret_name:
        description: "Secret Name"
        required: true
        type: string

jobs:
  deploy-app:
    runs-on: ubuntu-latest

    outputs:
      domain_name: ${{ steps.determine-domain.outputs.domain_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install npm dependencies
        run: npm ci

      - name: Login to Azure Container Registry (ACR)
        uses: azure/docker-login@v1
        with:
          login-server: nextrealitydigital.azurecr.io
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t agora-node-token-server:${{ github.sha }} .

      - name: Tag Docker image with latest and commit SHA
        run: |
          docker tag agora-node-token-server:${{ github.sha }} nextrealitydigital.azurecr.io/agora-node-token-server:latest
          docker tag agora-node-token-server:${{ github.sha }} nextrealitydigital.azurecr.io/agora-node-token-server:${{ github.sha }}

      - name: Push Docker image to ACR
        run: |
          docker push nextrealitydigital.azurecr.io/agora-node-token-server:latest
          docker push nextrealitydigital.azurecr.io/agora-node-token-server:${{ github.sha }}

      - name: Fetch Azure Function Secrets
        id: fetch-secrets
        run: |
          AZURE_FUNCTION_URL="${{ secrets.AZURE_FUNCTION_URL }}"
          AZURE_FUNCTION_CODE="${{ secrets.AZURE_FUNCTION_CODE }}"
          KEY_VAULT_ID="${{ github.event.inputs.key_vault_id }}"
          SECRET_NAME="${{ github.event.inputs.secret_name }}"

          URL="$AZURE_FUNCTION_URL?code=$AZURE_FUNCTION_CODE&key_vault_id=$KEY_VAULT_ID&name=$SECRET_NAME"

          SECRETS=$(curl -s -H "Content-Type: application/json" -X GET "$URL")

          if [ -z "$SECRETS" ]; then
              echo "Failed to retrieve secrets from Azure Function."
              exit 1
          fi

          SECRETS=$(echo "$SECRETS" | sed 's/^Secret value: //')

          echo "$SECRETS" > .env

          GH_ACTIONS_URL="$AZURE_FUNCTION_URL?code=$AZURE_FUNCTION_CODE&key_vault_id=$KEY_VAULT_ID&name=github-actions"

          GH_ACTIONS_SECRETS=$(curl -s -H "Content-Type: application/json" -X GET "$GH_ACTIONS_URL")

          if [ -z "$GH_ACTIONS_SECRETS" ]; then
              echo "Failed to retrieve secrets from Azure Function."
              exit 1
          fi

          GH_ACTIONS_SECRETS=$(echo "$GH_ACTIONS_SECRETS" | sed 's/^Secret value: //')

          echo "$GH_ACTIONS_SECRETS" >> .env

      - name: Export Kubeconfig and Mask Secrets -
        run: |
          set -a && source .env && set +a
          echo "$KUBECONFIG" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          echo "KUBECONFIG=$(cat ~/.kube/config)" >> $GITHUB_ENV
          echo ::add-mask::$KUBECONFIG

      - name: Create Kubernetes secret dynamically
        run: |
          # Source the .env
          set -a && source .env && set +a

          # Parse .env.template to extract the variable names
          SECRET_NAME="${{ github.event.inputs.secret_name }}"

          # Create a kubectl command for creating the secret
          kubectl create secret generic $SECRET_NAME \
            $(awk -F= '/^.+=.*/ {print "--from-literal=" $1 "=${" $1 "}"}' .env.template) \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes with updated image
        run: |
          kubectl set image deployment/agora-node-token-server agora-node-token-server=nextrealitydigital.azurecr.io/agora-node-token-server:${{ github.sha }}

  notify:
    name: Send notification
    runs-on: ubuntu-latest
    needs: [deploy-app]
    env:
      DOMAIN_NAME: ${{ needs.deploy-app.outputs.domain_name }}
    steps:
      - name: Notify slack channel
        id: slack-message
        uses: slackapi/slack-github-action@v1.24.0
        if: success()
        with:
          channel-id: ${{ secrets.SLACK_NOTIFICATIONS_CHANNEL }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "âœ… New service available! "
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Site Domain: `${{ env.DOMAIN_NAME }}`"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": "Check out the build log",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                },
                {
                  "type": "button",
                  "text": "Visit the changes live",
                  "url": "https://${{ env.DOMAIN_NAME }}"
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_TOKEN }}
