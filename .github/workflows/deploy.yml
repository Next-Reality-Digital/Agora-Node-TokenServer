name: Deploy Agora

on:
  workflow_dispatch:
    inputs:
      key_vault_id:
        description: "Azure Key Vault ID"
        required: true
        type: string
      secret_name:
        description: "Secret Name"
        required: true
        type: string
      ssh_user:
        description: "SSH User (optional)"
        required: false
        type: string
      ssh_host:
        description: "SSH Host (optional)"
        required: false
        type: string
      ssh_key:
        description: "SSH Private Key (base64-encoded, optional)"
        required: false
        type: string

jobs:
  deploy-agora:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install npm dependencies
        run: |
          npm ci

      - name: Install rsync
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext
          sudo apt-get install -y rsync

      - name: Fetch Azure Function Secrets
        id: fetch-secrets
        run: |
          AZURE_FUNCTION_URL="${{ secrets.AZURE_FUNCTION_URL }}"
          AZURE_FUNCTION_CODE="${{ secrets.AZURE_FUNCTION_CODE }}"
          KEY_VAULT_ID="${{ github.event.inputs.key_vault_id }}"
          SECRET_NAME="${{ github.event.inputs.secret_name }}"

          # Build the Azure Function URL
          URL="$AZURE_FUNCTION_URL?code=$AZURE_FUNCTION_CODE&key_vault_id=$KEY_VAULT_ID&name=$SECRET_NAME"

          SECRETS=$(curl -s -H "Content-Type: application/json" -X GET "$URL")

          if [ -z "$SECRETS" ]; then
              echo "Failed to retrieve secrets from Azure Function."
              exit 1
          fi

          # Remove "Secret value: " from the response
          SECRETS=$(echo "$SECRETS" | sed 's/^Secret value: //')

          # Save the secrets directly to the .env file
          echo "$SECRETS" > .env

          echo "Secrets fetched and saved to .env file."

          GH_ACTIONS_URL="$AZURE_FUNCTION_URL?code=$AZURE_FUNCTION_CODE&key_vault_id=$KEY_VAULT_ID&name=github-actions"

          # Get github-actions secrets
          GH_ACTIONS_SECRETS=$(curl -s -H "Content-Type: application/json" -X GET "$GH_ACTIONS_URL")

          if [ -z "$GH_ACTIONS_SECRETS" ]; then
              echo "Failed to retrieve secrets from Azure Function."
              exit 1
          fi

          # Remove "Secret value: " from the response
          GH_ACTIONS_SECRETS=$(echo "$GH_ACTIONS_SECRETS" | sed 's/^Secret value: //')

          # Save the secrets directly to the .env file
          echo "$GH_ACTIONS_SECRETS" >> .env

      - name: Remove the 'Secret value ' from the .env file
        run: |
          # Remove the 'Secret value: ' from the .env file
          sed -i 's/Secret value: //g' .env

      - name: Generate new .env file from template
        run: |
          # Assume you have .env.template in your repository
          if [ ! -f .env.template ]; then
              echo "Missing .env.template file in the repository."
              exit 1
          fi

          set -a
          source .env
          set +a

          # Generate new .env file by replacing placeholders with actual values
          envsubst < .env.template > .env.generated

      - name: Mask SSH Key
        run: |
          # Fetch the SSH key from input or secrets
          SSH_KEY=$(jq -r '.inputs.ssh_key' $GITHUB_EVENT_PATH)

          # Check if SSH_KEY is not empty
          if [ -n "$SSH_KEY" ]; then
            # Mask the SSH key to prevent it from showing in logs
            echo ::add-mask::$SSH_KEY
            echo ::add-mask::$SSH_USER
            echo ::add-mask::$SSH_HOST

            # Store the SSH key in a GitHub Actions environment variable
            echo SSH_KEY=$SSH_KEY >> $GITHUB_ENV
          else
            echo "No SSH key provided, skipping mask."
          fi

      - name: Source and decode SSH key
        id: source-env
        run: |
          set -a
          source .env
          set +a

          # Check if inputs were provided, otherwise fall back to .env.secrets
          if [ -z "${{ github.event.inputs.ssh_user }}" ]; then
            SSH_USER=$SSH_USER
          else
            SSH_USER="${{ github.event.inputs.ssh_user }}"
          fi

          if [ -z "${{ github.event.inputs.ssh_host }}" ]; then
            SSH_HOST=$SSH_HOST
          else
            SSH_HOST="${{ github.event.inputs.ssh_host }}"
          fi

          # Create the .ssh directory if it doesn't exist
          mkdir -p ~/.ssh

          # Decode the base64 SSH key and ensure a new line at the end of the private key
          echo "$SSH_KEY" | base64 -d > ~/.ssh/deploy_key_nrd
          chmod 600 ~/.ssh/deploy_key_nrd

          # Extract the public key from the private key
          ssh-keygen -y -f ~/.ssh/deploy_key_nrd > ~/.ssh/deploy_key_nrd.pub

          # Set necessary environment variables using GITHUB_ENV instead of echoing
          echo "SSH_HOST=${AGORA_SSH_HOST}" >> $GITHUB_ENV
          echo "SSH_USER=${AGORA_SSH_USER}" >> $GITHUB_ENV
          echo "DOMAIN_NAME=${AGORA_DOMAIN_NAME}" >> $GITHUB_ENV

      - name: Rsync files and node_modules to the server
        run: |
          set -a
          source .env
          set +a

          # Rsync application files
          rsync -avz --no-perms --no-owner --no-group -e "ssh -i ~/.ssh/deploy_key_nrd -o StrictHostKeyChecking=no" \
          --exclude=".git/" --exclude=".github/" --exclude=".env" --exclude=".env.template" --exclude=".env.generated" --exclude=".vscode/" --rsync-path="sudo rsync" \
          ./ $SSH_USER@$SSH_HOST:/var/www/$DOMAIN_NAME

          # Rsync node_modules to the server
          rsync -avz --no-perms --no-owner --no-group -e "ssh -i ~/.ssh/deploy_key_nrd -o StrictHostKeyChecking=no" \
          --rsync-path="sudo rsync" \
          node_modules/ $SSH_USER@$SSH_HOST:/var/www/$DOMAIN_NAME/node_modules/

          # Sync the generated .env file
          rsync -avz --no-perms --no-owner --no-group -e "ssh -i ~/.ssh/deploy_key_nrd -o StrictHostKeyChecking=no" \
          --rsync-path="sudo rsync" \
          .env.generated $SSH_USER@$SSH_HOST:/var/www/$DOMAIN_NAME/.env

      - name: SSH to Azure VM and run deployment commands
        run: |
          ssh -i ~/.ssh/deploy_key_nrd -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            cd /var/www/$DOMAIN_NAME
            sudo chown -R $SSH_USER:www-data .
            sudo chmod -R 755 .

            # Restart or start the app with pm2
            pm2 restart agora-token-app || pm2 start index.js --name agora-token-app
          EOF
