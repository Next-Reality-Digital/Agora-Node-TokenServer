name: Deploy Agora

on:
  workflow_dispatch:
    inputs:
      key_vault_id:
        description: "Azure Key Vault ID"
        required: true
        type: string
      secret_name:
        description: "Secret Name"
        required: true
        type: string

jobs:
  deploy-agora:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install rsync
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync gettext

      - name: Fetch Azure Function Secrets
        id: fetch-secrets
        run: |
          AZURE_FUNCTION_URL="${{ secrets.AZURE_FUNCTION_URL }}"
          AZURE_FUNCTION_CODE="${{ secrets.AZURE_FUNCTION_CODE }}"
          KEY_VAULT_ID="${{ github.event.inputs.key_vault_id }}"
          SECRET_NAME="${{ github.event.inputs.secret_name }}"

          # Build the Azure Function URL
          URL="$AZURE_FUNCTION_URL?code=$AZURE_FUNCTION_CODE&key_vault_id=$KEY_VAULT_ID&name=$SECRET_NAME"

          SECRETS=$(curl -s -H "Content-Type: application/json" -X GET "$URL")

          echo "Response from Azure Function: $SECRETS"

          if [ -z "$SECRETS" ]; then
              echo "Failed to retrieve secrets from Azure Function."
              exit 1
          fi

          # Save the secrets directly to the .env file
          echo "$SECRETS" > .env

          echo "Secrets fetched and saved to .env file."

      - name: Remove the 'Secret value ' from the .env file
        run: |
          # Remove the 'Secret value: ' from the .env file
          sed -i 's/Secret value: //g' .env

      - name: Generate new .env file from template
        run: |
          # Assume you have .env.template in your repository
          if [ ! -f .env.template ]; then
              echo "Missing .env.template file in the repository."
              exit 1
          fi

          set -a
          source .env
          set +a

          # Generate new .env file by replacing placeholders with actual values
          envsubst < .env.template > .env.generated

          # Optional: output the generated .env for debugging
          cat .env.generated

      - name: Source and decode SSH key
        id: source-env
        run: |
          set -a
          source .env
          set +a

          # Decode the base64 SSH key and ensure a new line at the end of the private key
          echo "$SSH_KEY" | base64 -d > ~/.ssh/deploy_key_nrd
          chmod 600 ~/.ssh/deploy_key_nrd

          # Extract the public key from the private key
          ssh-keygen -y -f ~/.ssh/deploy_key_nrd > ~/.ssh/deploy_key_nrd.pub

          # Output necessary variables
          echo "::set-output name=SSH_KEY::$(cat ~/.ssh/deploy_key_nrd)"
          echo "::set-output name=SSH_HOST::${SSH_HOST}"
          echo "::set-output name=SSH_USER::${SSH_USER}"
          echo "::set-output name=DOMAIN_NAME::${DOMAIN_NAME}"

      # Rsync the files to the server
      - name: Rsync files to server
        run: |
          set -a
          source .env
          set +a

          rsync -vz --no-perms --no-owner --no-group -e "ssh -i ~/.ssh/deploy_key_nrd -o StrictHostKeyChecking=no" \
          --exclude=".git/" --exclude=".github/" --exclude=".env" --exclude=".env.template" --exclude=".env.generated" --exclude=".vscode/" --rsync-path="sudo rsync" \
          ./ ${{ steps.source-env.outputs.SSH_USER }}@${{ steps.source-env.outputs.SSH_HOST }}:/var/www/${{ steps.source-env.outputs.DOMAIN_NAME }}

          # Sync the generated .env file
          rsync -vz --no-perms --no-owner --no-group -e "ssh -i ~/.ssh/deploy_key_nrd -o StrictHostKeyChecking=no" \
          --rsync-path="sudo rsync" \
          .env.generated ${{ steps.source-env.outputs.SSH_USER }}@${{ steps.source-env.outputs.SSH_HOST }}:/var/www/${{ steps.source-env.outputs.DOMAIN_NAME }}/.env
      - name: SSH to Azure VM and run deployment commands
        run: |
          ssh -i ~/.ssh/deploy_key_nrd -o StrictHostKeyChecking=no ${{ steps.source-env.outputs.SSH_USER }}@${{ steps.source-env.outputs.SSH_HOST }} << EOF
            cd /var/www/${{ steps.source-env.outputs.DOMAIN_NAME }}

            # Install dependencies
            npm install

            # Restart or start the app with pm2
            pm2 restart agora-token-app || pm2 start index.js --name agora-token-app
          EOF
